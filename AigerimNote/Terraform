What is Terraform 
name: equivalence-test
description: "Execute the suite of Terraform equivalence tests in testing/equivalence-tests"
inputs:
  target-terraform-version:
    description: "The version of Terraform to use in execution."
    required: true
  target-terraform-branch:
    description: "The branch within this repository to update and compare."
    required: true
  target-equivalence-test-version:
    description: "The version of the Terraform equivalence tests to use."
    default: "0.3.0"
  target-os:
    description: "Current operating system"
    default: "linux"
  target-arch:
    description: "Current architecture"
    default: "amd64"
runs:
  using: "composite"
  steps:
    - name: "download equivalence test binary"
      shell: bash
      run: |
        ./.github/scripts/equivalence-test.sh download_equivalence_test_binary \
          ${{ inputs.target-equivalence-test-version }} \
          ./bin/equivalence-tests \
          ${{ inputs.target-os }} \
          ${{ inputs.target-arch }}
    - name: "download terraform binary"
      shell: bash
      run: |
        ./.github/scripts/equivalence-test.sh download_terraform_binary \
          ${{ inputs.target-terraform-version }} \
          ./bin/terraform \
          ${{ inputs.target-os }} \
          ${{ inputs.target-arch }}
    - name: "run and update equivalence tests"
      shell: bash
      run: |
        ./bin/equivalence-tests update \
          --tests=testing/equivalence-tests/tests \
          --goldens=testing/equivalence-tests/outputs \
          --binary=$(pwd)/bin/terraform

        changed=$(git diff --quiet -- testing/equivalence-tests/outputs || echo true)
        if [[ $changed == "true" ]]; then
          echo "found changes, and pushing new golden files into branch ${{ inputs.target-terraform-branch }}."
          git config user.email "52939924+teamterraform@users.noreply.github.com"
          git config user.name "The Terraform Team"
          git add ./testing/equivalence-tests/outputs
          git commit -m "Automated equivalence test golden file update for release ${{ inputs.target-terraform-version }}."
          git push
        else
          echo "found no changes, so not pushing any updates."
        fi
 162
.github/scripts/equivalence-test.sh
@@ -0,0 +1,162 @@
#!/usr/bin/env bash
set -uo pipefail

function usage {
  cat <<-'EOF'
Usage: ./equivalence-test.sh <command> [<args>] [<options>]
Description:
  This script will handle various commands related to the execution of the
  Terraform equivalence tests.
Commands:
  get_target_branch <version>
    get_target_branch returns the default target branch for a given Terraform
    version.
    target_branch=$(./equivalence-test.sh get_target_branch v1.4.3); target_branch=v1.4
    target_branch=$(./equivalence-test.sh get_target_branch 1.4.3); target_branch=v1.4
  download_equivalence_test_binary <version> <target> <os> <arch>
    download_equivalence_test_binary downloads the equivalence testing binary
    for a given version and places it at the target path.
    ./equivalence-test.sh download_equivalence_test_binary 0.3.0 ./bin/terraform-equivalence-testing linux amd64
  download_terraform_binary <version> <target> <os> <arch>
    download_terraform_binary downloads the terraform release binary for a given
    version and places it at the target path.
    ./equivalence-test.sh download_terraform_binary 1.4.3 ./bin/terraform linux amd64
EOF
}

function download_equivalence_test_binary {
  VERSION="${1:-}"
  TARGET="${2:-}"
  OS="${3:-}"
  ARCH="${4:-}"

  if [[ -z "$VERSION" || -z "$TARGET" || -z "$OS" || -z "$ARCH" ]]; then
    echo "missing at least one of [<version>, <target>, <os>, <arch>] arguments"
    usage
    exit 1
  fi

  curl \
    -H "Accept: application/vnd.github+json" \
    "https://api.github.com/repos/hashicorp/terraform-equivalence-testing/releases" > releases.json

  ASSET="terraform-equivalence-testing_v${VERSION}_${OS}_${ARCH}.zip"
  ASSET_ID=$(jq -r --arg VERSION "v$VERSION" --arg ASSET "$ASSET" '.[] | select(.name == $VERSION) | .assets[] | select(.name == $ASSET) | .id' releases.json)

  mkdir -p zip
  curl -L \
    -H "Accept: application/octet-stream" \
    "https://api.github.com/repos/hashicorp/terraform-equivalence-testing/releases/assets/$ASSET_ID" > "zip/$ASSET"

  mkdir -p bin
  unzip -p "zip/$ASSET" terraform-equivalence-testing > "$TARGET"
  chmod u+x "$TARGET"
  rm -r zip
  rm releases.json
}

function download_terraform_binary {
  VERSION="${1:-}"
  TARGET="${2:-}"
  OS="${3:-}"
  ARCH="${4:-}"

  if [[ -z "$VERSION" || -z "$TARGET" || -z "$OS" || -z "$ARCH" ]]; then
    echo "missing at least one of [<version>, <target>, <os>, <arch>] arguments"
    usage
    exit 1
  fi

  mkdir -p zip
  curl "https://releases.hashicorp.com/terraform/${VERSION}/terraform_${VERSION}_${OS}_${ARCH}.zip" > "zip/terraform.zip"

  mkdir -p bin
  unzip -p "zip/terraform.zip" terraform > "$TARGET"
  chmod u+x "$TARGET"
  rm -r zip
}

function get_target_branch {
  VERSION="${1:-}"

  if [ -z "$VERSION" ]; then
    echo "missing <version> argument"
    usage
    exit 1
  fi


  # Split off the build metadata part, if any
  # (we won't actually include it in our final version, and handle it only for
  # completeness against semver syntax.)
  IFS='+' read -ra VERSION BUILD_META <<< "$VERSION"

  # Separate out the prerelease part, if any
  IFS='-' read -r BASE_VERSION PRERELEASE <<< "$VERSION"

  # Separate out major, minor and patch versions.
  IFS='.' read -r MAJOR_VERSION MINOR_VERSION PATCH_VERSION <<< "$BASE_VERSION"

  if [[ "$PRERELEASE" == *"alpha"* ]]; then
    TARGET_BRANCH=main
  else
    if [[ $MAJOR_VERSION = v* ]]; then
      TARGET_BRANCH=${MAJOR_VERSION}.${MINOR_VERSION}
    else
      TARGET_BRANCH=v${MAJOR_VERSION}.${MINOR_VERSION}
    fi
  fi

  echo "$TARGET_BRANCH"
}

function main {
  case "$1" in
    get_target_branch)
      if [ "${#@}" != 2 ]; then
        echo "invalid number of arguments"
        usage
        exit 1
      fi

      get_target_branch "$2"

      ;;
    download_equivalence_test_binary)
      if [ "${#@}" != 5 ]; then
        echo "invalid number of arguments"
        usage
        exit 1
      fi

      download_equivalence_test_binary "$2" "$3" "$4" "$5"

      ;;
    download_terraform_binary)
      if [ "${#@}" != 5 ]; then
        echo "invalid number of arguments"
        usage
        exit 1
      fi

      download_terraform_binary "$2" "$3" "$4" "$5"

      ;;
    *)
      echo "unrecognized command $*"
      usage
      exit 1

      ;;
  esac
}

main "$@"
exit $?
 45
.github/workflows/crt-hook-equivalence-tests.yml
@@ -0,0 +1,45 @@
name: crt-hook-equivalence-tests

on:
  repository_dispatch:
    types:
      - crt-hook-equivalence-tests::terraform::*

permissions:
  contents: write

jobs:
  parse-metadata:
    name: "Parse metadata.json"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.parse.outputs.version }}
      target-branch: ${{ steps.parse.outputs.target-branch }}
    steps:
      - name: parse
        id: parse
        env:
          METADATA_PAYLOAD: ${{ toJSON(github.event.client_payload.payload) }}
        run: |
          VERSION=$(echo ${METADATA_PAYLOAD} | jq -r '.version')
          TARGET_BRANCH=$(./.github/scripts/equivalence-test.sh get-target-branch "$VERSION")

          echo "target-branch=$TARGET_BRANCH" >> "GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
  run-equivalence-tests:
    runs-on: ubuntu-latest
    name: "Run equivalence tests"
    needs:
      - parse-metadata
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          ref: ${{ needs.parse-metadata.outputs.target-branch }}
      - uses: ./.github/actions/equivalence-test
        with:
          target-terraform-version: ${{ needs.parse-metadata.outputs.version }}
          target-terraform-branch: ${{ needs.parse-metadata.outputs.target-branch }}
          target-equivalence-test-version: 0.3.0
          target-os: linux
          target-arch: amd64
